#!/usr/bin/env python3
"""
Script de inicializa√ß√£o r√°pida
Verifica depend√™ncias e inicia a aplica√ß√£o
"""

import subprocess
import sys
import os

def check_python_version():
    """Verifica vers√£o do Python"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        print(f"   Voc√™ est√° usando Python {version.major}.{version.minor}.{version.micro}")
        sys.exit(1)
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")

def check_dependencies():
    """Verifica e instala depend√™ncias"""
    print("\nüì¶ Verificando depend√™ncias...")
    
    required = {
        'pandas': 'pandas',
        'openai': 'openai',
        'customtkinter': 'customtkinter',
        'dotenv': 'python-dotenv',
        'fuzzywuzzy': 'fuzzywuzzy'
    }
    
    missing = []
    
    for module, package in required.items():
        try:
            __import__(module)
            print(f"   ‚úÖ {package}")
        except ImportError:
            print(f"   ‚ùå {package} (faltando)")
            missing.append(package)
    
    if missing:
        print(f"\n‚ùå Faltam {len(missing)} depend√™ncia(s)")
        print("   Execute: pip install -r requirements.txt")
        print("   Ou ative o ambiente virtual: source .venv/bin/activate")
        sys.exit(1)

def check_env_file():
    """Verifica arquivo .env"""
    print("\nüîë Verificando configura√ß√£o...")
    
    if not os.path.exists('.env'):
        print("   ‚ö†Ô∏è  Arquivo .env n√£o encontrado")
        print("\n   AVISO: A funcionalidade de IA n√£o funcionar√° sem a chave OpenAI")
        print("   Para usar IA, crie um arquivo .env com:")
        print("   OPENAI_API_KEY=sua_chave_aqui")
        print("\n   Continuando em modo manual...")
    else:
        print("   ‚úÖ .env encontrado")

def check_csv_files():
    """Verifica arquivos CSV"""
    print("\nüìÑ Verificando arquivos CSV...")
    
    files_ok = True
    
    if os.path.exists('Base_Fazer.csv'):
        print("   ‚úÖ Base_Fazer.csv")
    else:
        print("   ‚ùå Base_Fazer.csv (n√£o encontrado)")
        files_ok = False
    
    if os.path.exists('Itens_Ativos.csv'):
        print("   ‚úÖ Itens_Ativos.csv")
    else:
        print("   ‚ùå Itens_Ativos.csv (n√£o encontrado)")
        files_ok = False
    
    if not files_ok:
        print("\n‚ùå Arquivos CSV necess√°rios n√£o encontrados!")
        print("   Coloque os arquivos no diret√≥rio raiz do projeto")
        sys.exit(1)

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    dirs = ['data', 'data/backups', 'logs']
    
    for d in dirs:
        os.makedirs(d, exist_ok=True)

def start_app():
    """Inicia a aplica√ß√£o"""
    print("\n" + "="*60)
    print("üöÄ Iniciando Shopper - Buscador de Substitutos")
    print("="*60)
    print()
    
    try:
        os.chdir('src')
        subprocess.run([sys.executable, 'main.py'])
    except KeyboardInterrupt:
        print("\n\nüëã Aplica√ß√£o encerrada pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro ao iniciar: {e}")
        sys.exit(1)

def main():
    """Fun√ß√£o principal"""
    print("="*60)
    print("Shopper - Verifica√ß√£o de Sistema")
    print("="*60)
    
    check_python_version()
    check_dependencies()
    check_env_file()
    check_csv_files()
    create_directories()
    
    print("\n‚úÖ Todas as verifica√ß√µes passaram!")
    
    start_app()

if __name__ == "__main__":
    main()
